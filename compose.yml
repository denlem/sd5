#version: '3.8'
services:
  nginx:
    container_name: ${PROJECT_NAME}-nginx
    build:
      context: config/docker/nginx
    volumes:
      - ./:/var/www/symfony:rw
    restart: no
    ports:
      - "8081:80"
    depends_on:
      - php-fpm

  php-fpm:
    container_name: ${PROJECT_NAME}-php-fpm
    build:
      context: config/docker/php-fpm
    volumes:
      - ./:/var/www/symfony:rw
      - ./config/docker/php-fpm/php.ini:/usr/local/etc/php/php.ini
      - ./config/docker/php-fpm/php.override.ini:/usr/local/etc/php/php.override.ini
    depends_on:
      - db

#  php-cli:
#    build:
#      context: config/docker/php-cli
#    volumes:
#      - ./:/var/www/symfony:rw
#    command: sleep 10000
#    container_name: ${PROJECT_NAME}-php-cli
#    depends_on:
#      - php-fpm

  db:
    image: percona/percona-xtradb-cluster:8.0
    container_name: "${PROJECT_NAME}_percona"
    hostname: "${PROJECT_NAME}_percona"
    build:
      context: config/docker/percona
    environment:
      MYSQL_ROOT_PASSWORD: example
    ports:
      - "3306:3306"
    volumes:
      - db_myitcareer_percona_v8:/var/lib/mysql
    networks:
      - esports-network


networks:
  esports-network:
    driver: bridge

########### Volume ###############
volumes:
  db_myitcareer_percona_v8:


#  db:
#    container_name: "${PROJECT_NAME}_percona"
#    hostname: "${PROJECT_NAME}_percona"
#    restart: no
#    build:
#      context: ./config/percona
#      dockerfile: Dockerfile
#    environment:
#      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
#    volumes:
#      - db_myitcareer_percona_v8:/var/lib/mysql
#      - ./var/sqldump:/opt/project/sqldump
#      - ./config/docker/percona/docker.cnf:/etc/my.cnf.d/docker.cnf
#      - ./bin/clearPersonalData.sql:/opt/project/clearPersonalData.sql

#  mysql:
#    image: mysql:8.0
#    command: --default-authentication-plugin=mysql_native_password
#    volumes:
#      - mysql:/var/lib/mysql
#    container_name: ${PROJECT_NAME}-mysql
#    restart: no
#    environment:
#      - "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"
#      - "MYSQL_DATABASE=${MYSQL_DATABASE}"
#      - "MYSQL_USER=${MYSQL_USER}"
#      - "MYSQL_PASSWORD=${MYSQL_PASSWORD}"
#volumes:
#  mysql:

####> doctrine/doctrine-bundle ###
#  database:
#    image: postgres:${POSTGRES_VERSION:-16}-alpine
#    environment:
#      POSTGRES_DB: ${POSTGRES_DB:-app}
#      # You should definitely change the password in production
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
#      POSTGRES_USER: ${POSTGRES_USER:-app}
#    healthcheck:
#      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
#      timeout: 5s
#      retries: 5
#      start_period: 60s
#    volumes:
#      - database_data:/var/lib/postgresql/data:rw
#      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
#      # - ./docker/db/data:/var/lib/postgresql/data:rw
####< doctrine/doctrine-bundle ###
###> doctrine/doctrine-bundle ###
#  database_data:
###< doctrine/doctrine-bundle ###
